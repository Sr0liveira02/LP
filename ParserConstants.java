/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int LET = 6;
  /** RegularExpression Id. */
  int TRUE = 7;
  /** RegularExpression Id. */
  int FALSE = 8;
  /** RegularExpression Id. */
  int PLUS = 9;
  /** RegularExpression Id. */
  int MINUS = 10;
  /** RegularExpression Id. */
  int STAR = 11;
  /** RegularExpression Id. */
  int DEREF = 12;
  /** RegularExpression Id. */
  int DIV = 13;
  /** RegularExpression Id. */
  int LPAR = 14;
  /** RegularExpression Id. */
  int RPAR = 15;
  /** RegularExpression Id. */
  int LBRA = 16;
  /** RegularExpression Id. */
  int RBRA = 17;
  /** RegularExpression Id. */
  int EQUAL = 18;
  /** RegularExpression Id. */
  int COLON = 19;
  /** RegularExpression Id. */
  int SEMIC = 20;
  /** RegularExpression Id. */
  int TERM = 21;
  /** RegularExpression Id. */
  int COMMA = 22;
  /** RegularExpression Id. */
  int AND = 23;
  /** RegularExpression Id. */
  int OR = 24;
  /** RegularExpression Id. */
  int EQ = 25;
  /** RegularExpression Id. */
  int GT = 26;
  /** RegularExpression Id. */
  int LT = 27;
  /** RegularExpression Id. */
  int GTEQ = 28;
  /** RegularExpression Id. */
  int LTEQ = 29;
  /** RegularExpression Id. */
  int DIF = 30;
  /** RegularExpression Id. */
  int NOT = 31;
  /** RegularExpression Id. */
  int ASSIGN = 32;
  /** RegularExpression Id. */
  int BOX = 33;
  /** RegularExpression Id. */
  int IF = 34;
  /** RegularExpression Id. */
  int ELSE = 35;
  /** RegularExpression Id. */
  int WHILE = 36;
  /** RegularExpression Id. */
  int PRINT = 37;
  /** RegularExpression Id. */
  int PRINTLN = 38;
  /** RegularExpression Id. */
  int FN = 39;
  /** RegularExpression Id. */
  int ARROW = 40;
  /** RegularExpression Id. */
  int NIL = 41;
  /** RegularExpression Id. */
  int LIST = 42;
  /** RegularExpression Id. */
  int LAZYLIST = 43;
  /** RegularExpression Id. */
  int MATCH = 44;
  /** RegularExpression Id. */
  int MATCHARROW = 45;
  /** RegularExpression Id. */
  int MATCHOR = 46;
  /** RegularExpression Id. */
  int String = 47;
  /** RegularExpression Id. */
  int Id = 48;
  /** RegularExpression Id. */
  int Num = 49;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<SINGLE_LINE_COMMENT>",
    "\"let\"",
    "\"true\"",
    "\"false\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"!\"",
    "\"/\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"=\"",
    "\":\"",
    "\";\"",
    "\";;\"",
    "\",\"",
    "\"&&\"",
    "\"||\"",
    "\"==\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "<DIF>",
    "\"~\"",
    "\":=\"",
    "\"box\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"print\"",
    "\"println\"",
    "\"fn\"",
    "\"=>\"",
    "\"nil\"",
    "\"::\"",
    "\":?\"",
    "\"match\"",
    "\"->\"",
    "\"|\"",
    "<String>",
    "<Id>",
    "<Num>",
  };

}
